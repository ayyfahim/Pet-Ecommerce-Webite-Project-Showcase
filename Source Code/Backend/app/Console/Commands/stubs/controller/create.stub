<?php

namespace App\Http\Controllers;

use App\Models\DummyModelClass;
use App\Http\Controllers\Traits\DummyModelClass\Filtration;
use App\Presenters\CommonPresenter;
use Exception;
use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use App\Http\Requests\DummyModelClassRequest;
use Illuminate\Routing\Redirector;

class DummyModelClassController extends Controller
{
    use Filtration;

    public function __construct()
    {
        $this->middleware(['auth']);
    }

    /**
     * index
     *
     * @param Request $request
     * @return Renderable
     */
    public function index(Request $request)
    {
        $DummyNames = DummyModelClass::query();
        if ($this->filterQueryStrings()) {
            $DummyNames = $this->filterData($request, $DummyNames);
        }
        return view('pages.DummyNames.index',[
            'DummyNames' => app(CommonPresenter::class)->paginate($DummyNames->get()),
            'breadcrumb' => $this->breadcrumb([], 'DummyModelClasss')
        ]);
    }

    /**
     * create
     *
     * @return Renderable
     */
    public function create()
    {
        return view('pages.DummyNames.create', array_merge($this->commonData(), [
            'breadcrumb' => $this->breadcrumb([
                [
                    'title' => 'DummyModelClasss',
                    'route' => route('DummyName.index')
                ]
            ], 'Add New DummyModelClass'),

        ]));
    }

    /**
     * store
     *
     * @param DummyModelClassRequest $request
     * @return JsonResponse|RedirectResponse|Redirector
     */
    public function store(DummyModelClassRequest $request)
    {
        try {
            DummyModelClass::create($request->toArray());
            return $this->returnCrudData(__('system_messages.common.create_success'), route('DummyName.index'));
        } catch (Exception $exception) {
            return $this->returnCrudData($exception->getMessage(), null, 'error');
        }
    }

    /**
     * edit
     *
     * @param DummyModelClass $DummyName.
     * @return Renderable
     */
    public function edit(DummyModelClass $DummyName)
    {
        return view('pages.DummyNames.edit', array_merge($this->commonData(), [
            'breadcrumb' => $this->breadcrumb([
                [
                    'title' => 'DummyModelClasss',
                    'route' => route('DummyName.index')
                ]
            ], 'Edit DummyModelClass'),
            'DummyName' => $DummyName,
        ]));
    }

    /**
     * update
     *
     * @param DummyModelClassRequest $request
     * @param DummyModelClass $DummyName.
     * @return JsonResponse|RedirectResponse|Redirector
     */
    public function update(DummyModelClassRequest $request, DummyModelClass $DummyName)
    {
        try {
           $DummyName->update($request->except('redirect_to'));
           return $this->returnCrudData(__('system_messages.common.update_success'), $request->redirect_to);
        } catch (Exception $exception) {
           return $this->returnCrudData($exception->getMessage(), null, 'error');
        }
    }

    /**
     * show
     *
     * @param DummyModelClass $DummyName.
     * @return Renderable
     */
    public function show(DummyModelClass $DummyName)
    {
        return view('pages.DummyNames.show', [
            'breadcrumb' => $this->breadcrumb([
                [
                    'title' => 'DummyModelClasss',
                    'route' => route('DummyName.index')
                ]
            ], $DummyName->title),
            'DummyName' => $DummyName
        ]);
    }

    /**
     * destroy
     *
     * @param DummyModelClass $DummyName.
     * @return JsonResponse|RedirectResponse|Redirector
     * @throws Exception
     */
    public function destroy(DummyModelClass $DummyName)
    {
        $DummyName->delete();
        return $this->returnCrudData(__('system_messages.common.delete_success'), route('DummyName.index'));
    }

    // Other Methods

    private function commonData()
    {
        return [
            'status' => DummyModelClass::getStatusFor('status')
        ];
    }
}
